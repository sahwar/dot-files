local prog=$1
local libdir="$ZDOTDIR/functions/environment-manager/lib"
local impldir="$libdir/$prog"

# save the current function path
saved_fpath=($fpath)

# set the function path to be the lib directory(reduce search time)
fpath=($libdir $impldir)

TRAPINT TRAPEXIT() {
	[ -z "$saved_fpath" ] && return
	trap - SIGINT # remove the sigint handler
	# restore environment on exit
	fpath=($saved_fpath)
	unfunction ${imports[@]}
	unset EM_GET saved_fpath imports
}

# collect helper function names
imports=($libdir/em_*(.N:t) $impldir/em_*(.N:t))

# load private functions
autoload -U ${imports[@]}

if [ -z "$EM_DIR" ]; then
	EM_DIR="$HOME/.env-manager"
fi

# wget support (Added --no-check-certificate for Github downloads)
which wget > /dev/null && EM_GET="wget --no-check-certificate -q -O-"

# curl support
which curl > /dev/null && EM_GET="curl -# -L"

# Ensure we have curl or wget
test -z "$EM_GET" && em_error_log "curl or wget required" && return

# Handle arguments
if test $# -eq 0; then
	em_display_help && return
fi
shift
case $prog in
	node|python) ;;
	-h|--help|help) em_display_help && return;;
	*) echo "Invalid program/option, enter 'em help' for usage info" && return ;;
esac
if test $# -eq 0; then
	em_display_environments $prog && return
fi
local cmd=$1
shift
case $cmd in
	compile) em_compile $prog $@ ;;
	install) em_install $prog $@ ;;
	uninstall) em_uninstall $prog $@ ;;
	add|+) echo && em_add $prog $@ && echo ;;
	rm|-) em_remove $prog $@ ;;
	activate) echo && em_activate $prog $@ && echo ;;
	deactivate) echo && em_deactivate $prog && echo ;;
	bin|which) em_display_path_for_environment $prog ;;
	login) em_login $prog ;;
	ls|list) em_display_remote_versions $prog ;;
	prev) em_activate_previous $prog ;;
	*) echo "Invalid command, enter 'em help' for usage info" ;;
esac
