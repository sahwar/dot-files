" Title: vimrc
" Author: Thiago de Arruda (github.com/tarruda)
" Description:
"   This file initializes my vim customizations/addons.  It was tested on vim
"   7.3 compiled with most features.  A lot here was taken from this vimrc:
"   https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc

" Basic initialization {{{
"
if !exists('g:vimrc_done_basic_init')
  let g:is_windows = has('win32') || has('win64')
  " Little hack to set the $MYVIMRC from the $VIMINIT in the case it was used to 
  " initialize vim.
  let s:default_vimrc = 1
  if empty($MYVIMRC)
    let $MYVIMRC = substitute($VIMINIT, "^source ", "", "g")
    let s:default_vimrc = 0
  endif
  " Extract the directory from $MYVIMRC
  if g:is_windows
    let g:rc_dir = strpart($MYVIMRC, 0, strridx($MYVIMRC, '\'))
  else
    let g:rc_dir = strpart($MYVIMRC, 0, strridx($MYVIMRC, '/'))
  endif
  if s:default_vimrc
    " Set .vim as the rc_dir
    let g:rc_dir = g:rc_dir.'/.vim'
  endif
  let g:vam_plugins_dir = g:rc_dir.'/addons'
  let &runtimepath = g:rc_dir.','.g:vam_plugins_dir.'/vim-addon-manager,'.$VIMRUNTIME
endif

" }}}
" Global settings {{{
"
set nocompatible
let mapleader = ","
set backspace=indent,eol,start " backspace over everything in insert mode
set nobackup " no need for backup files(use undo files instead)
set undofile " create '.<FILENAME>.un~' for persiting undo history
set dir=.,/tmp " swap files storage, first try in the cwd then in /tmp
set undodir=. " undo files storage, only allow the same directory
set history=500 " 500 lines of command-line history
set ruler " display cursor position at bottom
set mouse=a " enable terminal mouse extensions
if &term =~ 'tmux' " requires my custom terminfo file
  set ttymouse=xterm2 " integrate mouse extensions with tmux
  set ttyfast " normally this is only set for certain known terminals
endi
set noerrorbells visualbell t_vb= " disable annoying terminal sounds
set encoding=utf-8 " universal text encoding, compatible with ascii
set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set showbreak=↪
set fillchars=diff:⣿,vert:│
set showcmd " display incomplete commands
set completeopt=menu,menuone,longest " disable preview scratch window
set complete=.,w,b,u,t " h: 'complete'
set pumheight=15 " limit completion menu height
set nonumber " don't display line numbers on the left
set relativenumber " shows relative line numbers for easy motions
set splitbelow " put horizontal splits below 
set splitright " put vertical splits to the right
set expandtab " expand tabs into spaces
set softtabstop=2 " number of spaces used with tab/bs
set tabstop=2 " display tabs with the width of two spaces
set shiftwidth=2 " indent with two spaces 
set modelines=0 " running code in comments is not cool
set ignorecase " ignore case when searching
set smartcase " disable 'ignorecase' if search pattern has uppercase characters
set incsearch " highlight matches while typing search pattern
set hlsearch " highlight previous search matches
set showmatch " briefly jump to the matching bracket on insert
set matchtime=2 " time in decisecons to jump back from matching bracket 
set textwidth=80 " number of character allowed in a line
set wrap " automatically wrap text when 'textwidth' is reached
set foldmethod=indent " by default, fold using indentation
set nofoldenable " don't fold by default
set foldlevel=0 " if fold everything if 'foldenable' is set
set foldnestmax=10 " maximum fold depth
set synmaxcol=500 " maximum length to apply syntax highlighting
" set notimeout
" set ttimeout
" set ttimeoutlen=10
syntax on " enable syntax highlighting
filetype plugin indent on " enable file-specific plugins/settings
set backupskip=/tmp/*,/private/tmp/* " make it possible to use vim to edit crontab
augroup global_settings
  au!
  au VimResized * :wincmd = " resize windows when vim is resized 
  " return to the same line when file is reopened
  au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}
" Custom commands {{{
" Allows saving files which needs root permission with ':w!!'. This uses  one of
" the forms of the ':w' command, which instead of writing to a file, takes all
" lines in a range(or the whole buffer if not range is specified) and pipes as
" standard input for the command after '!'. In this case 'tee' will redirect its
" standard input(the entire buffer) to the file being edited(%)
cnoremap w!! w !sudo tee % >/dev/null
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.  Only define it when not
" defined already.
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
      \ | wincmd p | diffthis
" }}}
" Mappings {{{
" General {{{
" clear last search highlight
nnoremap <silent> <leader>c :noh<cr>
" move between bracket pairs using tab (in normal and visual mode)
nnoremap <tab> %
vnoremap <tab> % 
" move single lines
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
" move selections
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
" disable help key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>
" }}}
" Tmux {{{
if $TMUX != ''
  " fix arrow mappings in insert mode
  inoremap <Esc>A <up>
  inoremap <Esc>B <down>
  inoremap <Esc>C <right>
  inoremap <Esc>D <left>
  nnoremap <silent> <c-w>j :silent call TmuxMove('j')<cr>
  nnoremap <silent> <c-w>k :silent call TmuxMove('k')<cr>
  nnoremap <silent> <c-w>h :silent call TmuxMove('h')<cr>
  nnoremap <silent> <c-w>l :silent call TmuxMove('l')<cr>
  nnoremap <silent> <c-w><down> :silent call TmuxMove('j')<cr>
  nnoremap <silent> <c-w><up> :silent call TmuxMove('k')<cr>
  nnoremap <silent> <c-w><left> :silent call TmuxMove('h')<cr>
  nnoremap <silent> <c-w><right> :silent call TmuxMove('l')<cr>
  map <F6> :SlimuxREPLSendLine<CR>
  vmap <F6> :SlimuxREPLSendSelection<CR>
elseif has('gui_running')
  nnoremap <silent> <a-j> :wincmd j<cr>
  nnoremap <silent> <a-k> :wincmd k<cr>
  nnoremap <silent> <a-h> :wincmd h<cr>
  nnoremap <silent> <a-l> :wincmd l<cr>
  nnoremap <silent> <a-down> :wincmd j<cr>
  nnoremap <silent> <a-up> :wincmd k<cr>
  nnoremap <silent> <a-left> :wincmd h<cr>
  nnoremap <silent> <a-right> :wincmd l<cr>
else
  nnoremap <silent> <esc>j :wincmd j<cr>
  nnoremap <silent> <esc>k :wincmd k<cr>
  nnoremap <silent> <esc>h :wincmd h<cr>
  nnoremap <silent> <esc>l :wincmd l<cr>
  nnoremap <silent> <esc><down> :wincmd j<cr>
  nnoremap <silent> <esc><up> :wincmd k<cr>
  nnoremap <silent> <esc><left> :wincmd h<cr>
  nnoremap <silent> <esc><right> :wincmd l<cr>
endif
" }}}
" CtrlP {{{
nnoremap <silent> <leader>p :CtrlPTag<CR>
" }}}
" }}}
" Filetype settings {{{
augroup filetype_settings
  au!
  " Filetype detection {{{
  " my vimrc may not have the usual path
  au BufNewFile,BufRead $MYVIMRC setl filetype=vim
  au BufWritePost $MYVIMRC source %
  au BufNewFile,BufRead *.vimp setl filetype=vim " vimperator files
  " tmux rc file
  au  BufNewFile,BufRead .tmux.conf,tmuxrc,site-tmuxrc setl filetype=tmux
  " html with mustaches
  au  BufNewFile,BufRead *.html.mustache,*.html.handlebars,*.html.hbs,*.html.hogan,*.html.hulk setl filetype=html.mustache
  " extra zsh files without extensions 
  au BufNewFile,BufRead $ZDOTDIR/functions/**/* setl filetype=zsh
  au BufNewFile,BufRead $ZDOTDIR/completion-functions/* setl filetype=zsh
  au BufNewFile,BufRead $ZDOTDIR/plugins/**/functions/* setl filetype=zsh
  " }}}
  " Vim {{{
  au FileType vim
        \   setl foldmethod=marker
        \ | setl foldenable
  " }}}
  " Zsh/sh {{{
  au FileType sh,bash,zsh setl noexpandtab
  au FileType zsh 
        \   runtime! indent/sh.vim
        \ | setl foldmethod=marker
        \ | setl foldenable
        " \ | setl listchars=tab:\ \ ,eol:¬,extends:❯,precedes:❮
  " }}}
  " Nasm {{{
  au FileType nasm 
        \   setl softtabstop=4
        \ | setl shiftwidth=4 
        \ | setl textwidth=150
  " }}}
  " Python {{{
  au FileType python 
        \   setl softtabstop=4
        \ | setl shiftwidth=4 
        \ | setl textwidth79=
  " }}}
augroup END

" }}}
" Appearance {{{
"
if has('gui_running') " gvim
  colorscheme molokai
  if g:is_windows
    set guifont=Ubuntu\ Mono:h16
  elseif has('win32unix') " cygwin
    set guifont=Consolas\ 16
  else
    set guifont=Ubuntu\ Mono\ 16,Inconsolata\ 16,Monospace\ 14
  endif
  set guioptions-=m " remove menu bar
  set guioptions-=T " remove toolbar
  set guioptions-=lr " remove scroll bars
else
  if &term =~ 'tmux' || &term =~ 'rxvt-unicode-256color'
    " assuming tmux to be backed by urxvt256(which supports italics
    " and 256 colors)
    colorscheme twilight-term256
    highlight Comment cterm=italic
  endif
endif
" }}}
" Addons {{{
if !exists('g:vimrc_done_basic_init')
  let s:vim_addons = []
  " Tmux integration {{{
  if $TMUX != ''
    call add(s:vim_addons, 'github:epeli/slimux')
    " tranparent window/pane movement
    function! TmuxMove(direction)
      " Check if we are currently focusing on a edge window.
      " To achieve that,  move to/from the requested window and
      " see if the window number changed
      let oldw = winnr()
      silent! exe 'wincmd ' . a:direction
      let neww = winnr()
      silent! exe oldw . 'wincmd'
      if oldw == neww
        " The focused window is at an edge, so ask tmux to switch panes
        if a:direction == 'j'
          call system("tmux select-pane -D")
        elseif a:direction == 'k'
          call system("tmux select-pane -U")
        elseif a:direction == 'h'
          call system("tmux select-pane -L")
        elseif a:direction == 'l'
          call system("tmux select-pane -R")
        endif
      else
        exe 'wincmd ' . a:direction
      end
    endfunction
  endif
  " }}}
  " CtrlP(fuzzy finder) {{{
  call add(s:vim_addons, 'github:kien/ctrlp.vim')
  set wildignore+=*.o,*.so,*.dll,*.exe,*.bak,*.swp,*.class,*.pyc,*.pyd,*.pyo,*~
  set wildignore+=*.zip,*.tgz,*.gz,*.bz2,*.lz,*.rar,*.7z,*.jar
  let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/](\.(git|hg|svn|bzr)|node_modules)$',
        \ }
  let g:ctrlp_extensions = ['tag']
  let g:ctrlp_cmd = 'Ctrlp'
  fun! s:search()
    SourceLocalVimrcOnce
    CtrlP
  endf
  command! Ctrlp call s:search()
  " }}}
  " Clang(C/C++) {{{
  " Disable auto popup, use <Tab> to autocomplete
  let g:clang_complete_auto = 0
  " Show clang errors in the quickfix window
  let g:clang_complete_copen = 1
  " Use clang library instead of the executable
  " This requires both libclang and its headers to be installed
  let g:clang_use_library = 1
  " clang integration
  call add(s:vim_addons, 'github:Rip-Rip/clang_complete')
  " }}}
  " NERDTree {{{
  call add(s:vim_addons, 'github:scrooloose/nerdtree')
  " close VIM if NERDTree is the only buffer left
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
  " toggle NERDTree
  nnoremap <silent> <F2> :NERDTreeToggle<CR>
  " }}}
  " SuperTab {{{
  call add(s:vim_addons, 'github:ervandew/supertab')
  " superTab option for context aware completion
  let g:SuperTabDefaultCompletionType = "context"
  " }}}
  " Typescript {{{
  call add(s:vim_addons, 'github:leafgarland/typescript-vim')
  setl textwidth=80
  setl shiftwidth=2
  setl expandtab
  " }}}
  " Project-local vimrc {{{
  call add(s:vim_addons, 'github:MarcWeber/vim-addon-local-vimrc')
  let g:local_vimrc = {
        \ 'names': ['.lvimrc'],
        \ 'hash_fun': 'LVRHashOfFile'
        \ }
  " }}}
  " Other {{{
  call add(s:vim_addons, 'github:tpope/vim-repeat')
  call add(s:vim_addons, 'github:tpope/vim-surround')
  call add(s:vim_addons, 'github:tpope/vim-fugitive')
  call add(s:vim_addons, 'github:tpope/vim-commentary')
  call add(s:vim_addons, 'github:juvenn/mustache.vim')
  call add(s:vim_addons, 'github:pangloss/vim-javascript')
  call add(s:vim_addons, 'github:kchmck/vim-coffee-script')
  call add(s:vim_addons, 'github:kelan/gyp.vim')
  call add(s:vim_addons, 'github:groenewege/vim-less')
  call add(s:vim_addons, 'github:danro/rename.vim')
  call add(s:vim_addons, 'github:mattn/webapi-vim')
  call add(s:vim_addons, 'github:mattn/gist-vim')
  call add(s:vim_addons, 'github:walm/jshint.vim')
  call add(s:vim_addons, 'github:Townk/vim-autoclose')
  call add(s:vim_addons, 'github:vim-scripts/scratch.vim')
  call add(s:vim_addons, 'github:godlygeek/csapprox')
  call add(s:vim_addons, 'github:mileszs/ack.vim')
  call add(s:vim_addons, 'github:gabemc/powershell-vim')
  if has('python')
    call add(s:vim_addons, 'github:SirVer/ultisnips')
  else
    echo "ERROR: Need python support for ultisnips"
  endif
  " }}}
  " }}} 
  " Package management(vim-addon-manager setup) {{{
  let g:vim_addon_manager = {}
  let g:vim_addon_manager.auto_install = 1
  let g:vim_addon_manager.log_to_buf = 1
  let g:vim_addon_manager.shell_commands_run_method = 'system'
  let g:vim_addon_manager.plugin_root_dir = g:vam_plugins_dir
  if !isdirectory(g:vim_addon_manager.plugin_root_dir)
    call mkdir(g:vim_addon_manager.plugin_root_dir, "p")
  endif
  if !isdirectory(g:vim_addon_manager.plugin_root_dir.'/vim-addon-manager/autoload')
    execute '!git clone git://github.com/MarcWeber/vim-addon-manager '
          \ shellescape(g:vim_addon_manager.plugin_root_dir.'/vim-addon-manager', 1)
  endif
  let g:vim_addon_manager.scms = {'scms': {}}
  if executable('git')
    fun! VamGitClone(repository, targetDir)
      return vam#utils#RunShell('git clone $.url $p', a:repository, a:targetDir)
    endfun
    let g:vim_addon_manager.scms.git = {'clone': ['VamGitClone']}
  else
    let g:vim_addon_manager.drop_git_sources = 1
  endif
  call vam#ActivateAddons(s:vim_addons)
  let g:vimrc_done_basic_init = 1
endif
" }}}
